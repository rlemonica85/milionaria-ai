[build-system]
requires = ["setuptools>=68.0.0", "wheel>=0.41.0"]
build-backend = "setuptools.build_meta"

[project]
name = "milionaria-ai"
version = "1.0.0"
description = "Sistema inteligente de análise e predição para +Milionária"
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE"}
authors = [
    {name = "Rodrigo", email = "rodrigo@example.com"},
]
maintainers = [
    {name = "Rodrigo", email = "rodrigo@example.com"},
]
keywords = [
    "lottery",
    "prediction",
    "machine-learning",
    "data-analysis",
    "milionaria",
    "ai",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Board Games",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
    "pandas>=2.0.0",
    "polars>=0.20.0",
    "pydantic>=2.0.0",
    "sqlalchemy>=2.0.0",
    "aiosqlite>=0.19.0",
    "openpyxl>=3.1.0",
    "playwright>=1.40.0",
    "lxml>=4.9.0",
    "tenacity>=8.2.0",
    "dateparser>=1.1.0",
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    "ray>=2.8.0",
    "joblib>=1.3.0",
    "PyYAML>=6.0",
    "streamlit>=1.28.0",
    "psutil>=5.9.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
]

[project.optional-dependencies]
gpu = [
    "cuml>=23.10.0",
    "cupy-cuda11x>=12.0.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
build = [
    "pyinstaller>=6.0.0",
    "setuptools>=68.0.0",
    "wheel>=0.41.0",
    "build>=0.10.0",
]
all = [
    "milionaria-ai[gpu,dev,build]",
]

[project.scripts]
milionaria = "src.cli.app:main"
milionaria-update = "milionaria:main"

[project.gui-scripts]
milionaria-gui = "app_streamlit:main"

[project.urls]
Homepage = "https://github.com/rodrigo/milionaria-ai"
Documentation = "https://github.com/rodrigo/milionaria-ai/blob/main/README.md"
Repository = "https://github.com/rodrigo/milionaria-ai.git"
"Bug Tracker" = "https://github.com/rodrigo/milionaria-ai/issues"
Changelog = "https://github.com/rodrigo/milionaria-ai/blob/main/CHANGELOG.md"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["src*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = [
    "*.yaml",
    "*.yml",
    "*.json",
    "*.txt",
    "*.md",
]

# Configuração do pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "asyncio: mark test as async",
    "slow: mark test as slow",
    "integration: mark test as integration test",
    "unit: mark test as unit test",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Configuração do Black (formatador de código)
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

# Configuração do isort (organizador de imports)
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Configuração do mypy (verificador de tipos)
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "polars.*",
    "ray.*",
    "streamlit.*",
    "bs4.*",
]
ignore_missing_imports = true

# Configuração do flake8 (linter)
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    "venv",
]

# Configuração do coverage
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"