#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Milion√°ria-AI - Interface Gr√°fica Moderna
Software de gera√ß√£o inteligente de bilhetes para Mega-Sena
Compat√≠vel com Windows 11
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import os
import sys
import pandas as pd
from datetime import datetime
import webbrowser
from pathlib import Path

# Adicionar o diret√≥rio src ao path para importar m√≥dulos
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

try:
    from cli.app import main as cli_main
    from db.schema import get_engine
    from db.io import read_all_sorteios
    from generate.tickets import generate_tickets
    from models.scoring import train_model, calculate_scores
except ImportError as e:
    print(f"Erro ao importar m√≥dulos: {e}")
    print("Certifique-se de que todos os m√≥dulos est√£o instalados")

class MilionariaGUI:
    def __init__(self, root):
        self.root = root
        self.setup_window()
        self.setup_styles()
        self.create_widgets()
        self.status_text = "Pronto para gerar bilhetes inteligentes"
        self.update_status()
        
    def setup_window(self):
        """Configurar janela principal"""
        self.root.title("Milion√°ria-AI - Gerador Inteligente de Bilhetes")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 700)
        
        # Configurar √≠cone (se existir)
        try:
            self.root.iconbitmap("icon.ico")
        except:
            pass
            
        # Centralizar janela
        self.center_window()
        
        # Configurar tema moderno para Windows 11
        self.root.configure(bg='#f0f0f0')
        
    def center_window(self):
        """Centralizar janela na tela"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
        
    def setup_styles(self):
        """Configurar estilos modernos"""
        self.style = ttk.Style()
        
        # Configurar tema moderno
        self.style.theme_use('clam')
        
        # Cores modernas para Windows 11
        colors = {
            'primary': '#0078d4',
            'secondary': '#106ebe',
            'success': '#107c10',
            'warning': '#ff8c00',
            'danger': '#d13438',
            'light': '#f8f9fa',
            'dark': '#212529',
            'background': '#ffffff',
            'surface': '#f5f5f5'
        }
        
        # Configurar estilos personalizados
        self.style.configure('Title.TLabel', 
                           font=('Segoe UI', 24, 'bold'),
                           foreground=colors['primary'],
                           background='#f0f0f0')
                           
        self.style.configure('Subtitle.TLabel',
                           font=('Segoe UI', 12),
                           foreground=colors['dark'],
                           background='#f0f0f0')
                           
        self.style.configure('Primary.TButton',
                           font=('Segoe UI', 10, 'bold'),
                           foreground='white',
                           background=colors['primary'])
                           
        self.style.configure('Success.TButton',
                           font=('Segoe UI', 10, 'bold'),
                           foreground='white',
                           background=colors['success'])
                           
        self.style.configure('Modern.TFrame',
                           background='#ffffff',
                           relief='flat',
                           borderwidth=1)
                           
    def create_widgets(self):
        """Criar widgets da interface"""
        # Frame principal
        main_frame = ttk.Frame(self.root, style='Modern.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Cabe√ßalho
        self.create_header(main_frame)
        
        # Notebook para abas
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=(20, 0))
        
        # Criar abas
        self.create_generate_tab()
        self.create_analysis_tab()
        self.create_history_tab()
        self.create_settings_tab()
        
        # Barra de status
        self.create_status_bar(main_frame)
        
    def create_header(self, parent):
        """Criar cabe√ßalho da aplica√ß√£o"""
        header_frame = ttk.Frame(parent, style='Modern.TFrame')
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        # T√≠tulo
        title_label = ttk.Label(header_frame, 
                               text="üéØ Milion√°ria-AI",
                               style='Title.TLabel')
        title_label.pack(side=tk.LEFT)
        
        # Subt√≠tulo
        subtitle_label = ttk.Label(header_frame,
                                 text="Gerador Inteligente de Bilhetes para Mega-Sena",
                                 style='Subtitle.TLabel')
        subtitle_label.pack(side=tk.LEFT, padx=(10, 0))
        
        # Bot√£o de ajuda
        help_btn = ttk.Button(header_frame,
                             text="‚ùì Ajuda",
                             command=self.show_help)
        help_btn.pack(side=tk.RIGHT)
        
    def create_generate_tab(self):
        """Criar aba de gera√ß√£o de bilhetes"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üé≤ Gerar Bilhetes")
        
        # Frame de configura√ß√µes
        config_frame = ttk.LabelFrame(tab_frame, text="Configura√ß√µes de Gera√ß√£o", padding=20)
        config_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # N√∫mero de bilhetes
        ttk.Label(config_frame, text="N√∫mero de bilhetes:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.num_tickets_var = tk.StringVar(value="50")
        num_tickets_spin = ttk.Spinbox(config_frame, 
                                      from_=1, to=1000, 
                                      textvariable=self.num_tickets_var,
                                      width=10)
        num_tickets_spin.grid(row=0, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        
        # Estrat√©gia
        ttk.Label(config_frame, text="Estrat√©gia:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.strategy_var = tk.StringVar(value="balanced")
        strategy_combo = ttk.Combobox(config_frame,
                                    textvariable=self.strategy_var,
                                    values=["conservative", "balanced", "aggressive"],
                                    state="readonly",
                                    width=15)
        strategy_combo.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        
        # Filtros avan√ßados
        ttk.Label(config_frame, text="Usar filtros avan√ßados:").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.use_filters_var = tk.BooleanVar(value=True)
        filters_check = ttk.Checkbutton(config_frame,
                                       variable=self.use_filters_var)
        filters_check.grid(row=2, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        
        # Bot√µes de a√ß√£o
        action_frame = ttk.Frame(tab_frame)
        action_frame.pack(fill=tk.X, padx=20, pady=20)
        
        generate_btn = ttk.Button(action_frame,
                                 text="üöÄ Gerar Bilhetes",
                                 style='Primary.TButton',
                                 command=self.generate_tickets)
        generate_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        export_btn = ttk.Button(action_frame,
                               text="üìä Exportar Excel",
                               style='Success.TButton',
                               command=self.export_tickets)
        export_btn.pack(side=tk.LEFT)
        
        # √Årea de resultados
        results_frame = ttk.LabelFrame(tab_frame, text="Bilhetes Gerados", padding=10)
        results_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Treeview para mostrar bilhetes
        columns = ('ID', 'N√∫meros', 'Score', 'Estrat√©gia')
        self.tickets_tree = ttk.Treeview(results_frame, columns=columns, show='headings', height=10)
        
        for col in columns:
            self.tickets_tree.heading(col, text=col)
            self.tickets_tree.column(col, width=150)
            
        # Scrollbar
        scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.tickets_tree.yview)
        self.tickets_tree.configure(yscrollcommand=scrollbar.set)
        
        self.tickets_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
    def create_analysis_tab(self):
        """Criar aba de an√°lise"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üìà An√°lise")
        
        # Frame de estat√≠sticas
        stats_frame = ttk.LabelFrame(tab_frame, text="Estat√≠sticas do Banco de Dados", padding=20)
        stats_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Labels para estat√≠sticas
        self.stats_labels = {}
        stats_info = [
            ("Total de sorteios:", "total_draws"),
            ("√öltimo sorteio:", "last_draw"),
            ("N√∫meros mais sorteados:", "hot_numbers"),
            ("N√∫meros menos sorteados:", "cold_numbers")
        ]
        
        for i, (label_text, key) in enumerate(stats_info):
            ttk.Label(stats_frame, text=label_text).grid(row=i, column=0, sticky=tk.W, pady=5)
            self.stats_labels[key] = ttk.Label(stats_frame, text="Carregando...")
            self.stats_labels[key].grid(row=i, column=1, sticky=tk.W, padx=(20, 0), pady=5)
            
        # Bot√£o para atualizar estat√≠sticas
        update_stats_btn = ttk.Button(stats_frame,
                                     text="üîÑ Atualizar Estat√≠sticas",
                                     command=self.update_statistics)
        update_stats_btn.grid(row=len(stats_info), column=0, columnspan=2, pady=20)
        
        # Frame de gr√°ficos
        charts_frame = ttk.LabelFrame(tab_frame, text="Visualiza√ß√µes", padding=20)
        charts_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Bot√µes para gr√°ficos
        chart_buttons = [
            ("üìä Frequ√™ncia de N√∫meros", self.show_frequency_chart),
            ("üìà Tend√™ncias", self.show_trends_chart),
            ("üéØ Padr√µes", self.show_patterns_chart)
        ]
        
        for i, (text, command) in enumerate(chart_buttons):
            btn = ttk.Button(charts_frame, text=text, command=command)
            btn.grid(row=0, column=i, padx=10, pady=10)
            
    def create_history_tab(self):
        """Criar aba de hist√≥rico"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üìã Hist√≥rico")
        
        # Frame de controles
        controls_frame = ttk.Frame(tab_frame)
        controls_frame.pack(fill=tk.X, padx=20, pady=10)
        
        ttk.Button(controls_frame,
                  text="üîÑ Atualizar Dados",
                  command=self.update_database).pack(side=tk.LEFT, padx=(0, 10))
                  
        ttk.Button(controls_frame,
                  text="üì• Importar Dados",
                  command=self.import_data).pack(side=tk.LEFT, padx=(0, 10))
                  
        ttk.Button(controls_frame,
                  text="üåê Abrir Streamlit",
                  command=self.open_streamlit).pack(side=tk.LEFT)
        
        # Treeview para hist√≥rico
        history_frame = ttk.LabelFrame(tab_frame, text="Sorteios Recentes", padding=10)
        history_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        columns = ('Concurso', 'Data', 'N√∫meros', 'Arrecada√ß√£o')
        self.history_tree = ttk.Treeview(history_frame, columns=columns, show='headings')
        
        for col in columns:
            self.history_tree.heading(col, text=col)
            self.history_tree.column(col, width=150)
            
        history_scrollbar = ttk.Scrollbar(history_frame, orient=tk.VERTICAL, command=self.history_tree.yview)
        self.history_tree.configure(yscrollcommand=history_scrollbar.set)
        
        self.history_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        history_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
    def create_settings_tab(self):
        """Criar aba de configura√ß√µes"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="‚öôÔ∏è Configura√ß√µes")
        
        # Frame de configura√ß√µes gerais
        general_frame = ttk.LabelFrame(tab_frame, text="Configura√ß√µes Gerais", padding=20)
        general_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Configura√ß√µes
        settings = [
            ("Pasta de sa√≠da:", "output_folder"),
            ("Formato de exporta√ß√£o:", "export_format"),
            ("Tema da interface:", "theme")
        ]
        
        self.settings_vars = {}
        for i, (label_text, key) in enumerate(settings):
            ttk.Label(general_frame, text=label_text).grid(row=i, column=0, sticky=tk.W, pady=5)
            
            if key == "output_folder":
                frame = ttk.Frame(general_frame)
                frame.grid(row=i, column=1, sticky=tk.W, padx=(20, 0), pady=5)
                
                self.settings_vars[key] = tk.StringVar(value="outputs")
                entry = ttk.Entry(frame, textvariable=self.settings_vars[key], width=30)
                entry.pack(side=tk.LEFT)
                
                browse_btn = ttk.Button(frame, text="üìÅ", width=3,
                                       command=lambda: self.browse_folder(key))
                browse_btn.pack(side=tk.LEFT, padx=(5, 0))
                
            elif key == "export_format":
                self.settings_vars[key] = tk.StringVar(value="xlsx")
                combo = ttk.Combobox(general_frame,
                                   textvariable=self.settings_vars[key],
                                   values=["xlsx", "csv", "json"],
                                   state="readonly",
                                   width=15)
                combo.grid(row=i, column=1, sticky=tk.W, padx=(20, 0), pady=5)
                
            elif key == "theme":
                self.settings_vars[key] = tk.StringVar(value="clam")
                combo = ttk.Combobox(general_frame,
                                   textvariable=self.settings_vars[key],
                                   values=["clam", "alt", "default"],
                                   state="readonly",
                                   width=15)
                combo.grid(row=i, column=1, sticky=tk.W, padx=(20, 0), pady=5)
                
        # Bot√£o para salvar configura√ß√µes
        save_btn = ttk.Button(general_frame,
                             text="üíæ Salvar Configura√ß√µes",
                             style='Success.TButton',
                             command=self.save_settings)
        save_btn.grid(row=len(settings), column=0, columnspan=2, pady=20)
        
        # Frame de informa√ß√µes
        info_frame = ttk.LabelFrame(tab_frame, text="Informa√ß√µes do Sistema", padding=20)
        info_frame.pack(fill=tk.X, padx=20, pady=10)
        
        info_text = f"""
        Vers√£o: 2.0.0
        Python: {sys.version.split()[0]}
        Sistema: Windows 11
        Diret√≥rio: {os.getcwd()}
        """
        
        ttk.Label(info_frame, text=info_text.strip()).pack(anchor=tk.W)
        
    def create_status_bar(self, parent):
        """Criar barra de status"""
        status_frame = ttk.Frame(parent)
        status_frame.pack(fill=tk.X, side=tk.BOTTOM, pady=(10, 0))
        
        self.status_label = ttk.Label(status_frame, text="Pronto")
        self.status_label.pack(side=tk.LEFT)
        
        # Progress bar
        self.progress = ttk.Progressbar(status_frame, mode='indeterminate')
        self.progress.pack(side=tk.RIGHT, padx=(10, 0))
        
    def update_status(self, message=""):
        """Atualizar barra de status"""
        if message:
            self.status_text = message
        self.status_label.config(text=self.status_text)
        self.root.update_idletasks()
        
    def start_progress(self):
        """Iniciar barra de progresso"""
        self.progress.start()
        
    def stop_progress(self):
        """Parar barra de progresso"""
        self.progress.stop()
        
    def generate_tickets(self):
        """Gerar bilhetes em thread separada"""
        def run_generation():
            try:
                self.start_progress()
                self.update_status("Gerando bilhetes...")
                
                num_tickets = int(self.num_tickets_var.get())
                strategy = self.strategy_var.get()
                use_filters = self.use_filters_var.get()
                
                # Simular gera√ß√£o (substituir pela l√≥gica real)
                import time
                time.sleep(2)  # Simular processamento
                
                # Limpar resultados anteriores
                for item in self.tickets_tree.get_children():
                    self.tickets_tree.delete(item)
                    
                # Adicionar bilhetes simulados
                for i in range(num_tickets):
                    numbers = sorted([f"{j:02d}" for j in range(1, 61) if j % (i+1) == 0][:6])
                    score = f"{0.75 + (i * 0.001):.3f}"
                    self.tickets_tree.insert('', 'end', values=(i+1, ' '.join(numbers), score, strategy))
                    
                self.update_status(f"‚úÖ {num_tickets} bilhetes gerados com sucesso!")
                
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao gerar bilhetes: {str(e)}")
                self.update_status("‚ùå Erro na gera√ß√£o")
            finally:
                self.stop_progress()
                
        threading.Thread(target=run_generation, daemon=True).start()
        
    def export_tickets(self):
        """Exportar bilhetes para arquivo"""
        try:
            if not self.tickets_tree.get_children():
                messagebox.showwarning("Aviso", "Nenhum bilhete para exportar!")
                return
                
            filename = filedialog.asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("CSV files", "*.csv")]
            )
            
            if filename:
                # Coletar dados da treeview
                data = []
                for item in self.tickets_tree.get_children():
                    values = self.tickets_tree.item(item)['values']
                    data.append(values)
                    
                # Criar DataFrame
                df = pd.DataFrame(data, columns=['ID', 'N√∫meros', 'Score', 'Estrat√©gia'])
                
                # Salvar arquivo
                if filename.endswith('.xlsx'):
                    df.to_excel(filename, index=False)
                else:
                    df.to_csv(filename, index=False)
                    
                messagebox.showinfo("Sucesso", f"Bilhetes exportados para: {filename}")
                self.update_status(f"üìä Exportado: {os.path.basename(filename)}")
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao exportar: {str(e)}")
            
    def update_statistics(self):
        """Atualizar estat√≠sticas"""
        def run_update():
            try:
                self.start_progress()
                self.update_status("Atualizando estat√≠sticas...")
                
                # Simular carregamento de estat√≠sticas
                import time
                time.sleep(1)
                
                self.stats_labels["total_draws"].config(text="2.750 sorteios")
                self.stats_labels["last_draw"].config(text="11/08/2025")
                self.stats_labels["hot_numbers"].config(text="05, 23, 33, 42, 53")
                self.stats_labels["cold_numbers"].config(text="07, 18, 28, 39, 49")
                
                self.update_status("‚úÖ Estat√≠sticas atualizadas")
                
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao atualizar estat√≠sticas: {str(e)}")
            finally:
                self.stop_progress()
                
        threading.Thread(target=run_update, daemon=True).start()
        
    def show_frequency_chart(self):
        """Mostrar gr√°fico de frequ√™ncia"""
        messagebox.showinfo("Gr√°fico", "Funcionalidade de gr√°ficos ser√° implementada em breve!")
        
    def show_trends_chart(self):
        """Mostrar gr√°fico de tend√™ncias"""
        messagebox.showinfo("Gr√°fico", "Funcionalidade de gr√°ficos ser√° implementada em breve!")
        
    def show_patterns_chart(self):
        """Mostrar gr√°fico de padr√µes"""
        messagebox.showinfo("Gr√°fico", "Funcionalidade de gr√°ficos ser√° implementada em breve!")
        
    def update_database(self):
        """Atualizar banco de dados"""
        def run_update():
            try:
                self.start_progress()
                self.update_status("Atualizando banco de dados...")
                
                # Executar atualiza√ß√£o real
                import subprocess
                result = subprocess.run([sys.executable, "milionaria.py", "update"], 
                                      capture_output=True, text=True)
                
                if result.returncode == 0:
                    self.update_status("‚úÖ Banco de dados atualizado")
                    messagebox.showinfo("Sucesso", "Banco de dados atualizado com sucesso!")
                else:
                    raise Exception(result.stderr or "Erro desconhecido")
                    
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao atualizar banco: {str(e)}")
                self.update_status("‚ùå Erro na atualiza√ß√£o")
            finally:
                self.stop_progress()
                
        threading.Thread(target=run_update, daemon=True).start()
        
    def import_data(self):
        """Importar dados"""
        filename = filedialog.askopenfilename(
            filetypes=[("CSV files", "*.csv"), ("Excel files", "*.xlsx")]
        )
        
        if filename:
            messagebox.showinfo("Importa√ß√£o", f"Importando dados de: {os.path.basename(filename)}")
            
    def open_streamlit(self):
        """Abrir interface Streamlit"""
        try:
            webbrowser.open("http://localhost:8501")
            self.update_status("üåê Streamlit aberto no navegador")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir Streamlit: {str(e)}")
            
    def browse_folder(self, key):
        """Navegar por pastas"""
        folder = filedialog.askdirectory()
        if folder:
            self.settings_vars[key].set(folder)
            
    def save_settings(self):
        """Salvar configura√ß√µes"""
        try:
            # Aplicar tema
            theme = self.settings_vars["theme"].get()
            self.style.theme_use(theme)
            
            messagebox.showinfo("Sucesso", "Configura√ß√µes salvas com sucesso!")
            self.update_status("üíæ Configura√ß√µes salvas")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar configura√ß√µes: {str(e)}")
            
    def show_help(self):
        """Mostrar ajuda"""
        help_text = """
        üéØ Milion√°ria-AI - Ajuda
        
        COMO USAR:
        
        1. ABA GERAR BILHETES:
           - Configure o n√∫mero de bilhetes desejado
           - Escolha a estrat√©gia (conservadora, equilibrada, agressiva)
           - Clique em "Gerar Bilhetes" para criar os jogos
           - Use "Exportar Excel" para salvar os resultados
           
        2. ABA AN√ÅLISE:
           - Visualize estat√≠sticas do banco de dados
           - Atualize as informa√ß√µes com o bot√£o "Atualizar"
           - Acesse gr√°ficos e visualiza√ß√µes
           
        3. ABA HIST√ìRICO:
           - Veja os sorteios recentes
           - Atualize o banco de dados
           - Importe novos dados
           - Abra a interface web Streamlit
           
        4. ABA CONFIGURA√á√ïES:
           - Configure pasta de sa√≠da
           - Escolha formato de exporta√ß√£o
           - Altere tema da interface
           - Veja informa√ß√µes do sistema
           
        DICAS:
        - Mantenha o banco de dados sempre atualizado
        - Use filtros avan√ßados para melhores resultados
        - Experimente diferentes estrat√©gias
        - Exporte regularmente seus bilhetes
        """
        
        help_window = tk.Toplevel(self.root)
        help_window.title("Ajuda - Milion√°ria-AI")
        help_window.geometry("600x500")
        help_window.resizable(False, False)
        
        text_widget = tk.Text(help_window, wrap=tk.WORD, padx=20, pady=20)
        text_widget.pack(fill=tk.BOTH, expand=True)
        text_widget.insert(tk.END, help_text)
        text_widget.config(state=tk.DISABLED)
        
        # Centralizar janela de ajuda
        help_window.transient(self.root)
        help_window.grab_set()
        
def main():
    """Fun√ß√£o principal"""
    root = tk.Tk()
    app = MilionariaGUI(root)
    
    # Configurar fechamento da aplica√ß√£o
    def on_closing():
        if messagebox.askokcancel("Sair", "Deseja realmente sair do Milion√°ria-AI?"):
            root.destroy()
            
    root.protocol("WM_DELETE_WINDOW", on_closing)
    
    # Iniciar aplica√ß√£o
    root.mainloop()

if __name__ == "__main__":
    main()