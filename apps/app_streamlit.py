"""Interface Streamlit para explora√ß√£o de scores e jogos da +Milion√°ria.

Este aplicativo fornece uma interface web interativa para:
- Configurar par√¢metros de gera√ß√£o
- Executar o pipeline completo
- Visualizar resultados e m√©tricas
- Exportar bilhetes em Excel
"""

import streamlit as st
import pandas as pd
import time
from pathlib import Path
import os
import yaml
from datetime import datetime
import traceback
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/streamlit_debug.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Importar m√≥dulos do projeto
try:
    from src.etl.from_db import load_draws
    from src.features.make import build_number_features, latest_feature_snapshot
    from src.models.scoring import learn_weights_ridge, score_numbers
    from src.generate.tickets import load_filters_config, generate_candidates, apply_filters, assign_trevos
    from src.simulate.backtest_ray import run_backtest_parallel, print_backtest_summary
    from src.generate.export import export_excel, format_ticket_display
except ImportError as e:
    st.error(f"Erro ao importar m√≥dulos: {e}")
    st.stop()

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="+Milion√°ria AI",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo principal
st.title("üéØ +Milion√°ria AI - Interface de Explora√ß√£o")
st.markdown("---")

# Sidebar para configura√ß√µes
st.sidebar.header("‚öôÔ∏è Configura√ß√µes")

# Inputs de configura√ß√£o
db_path = st.sidebar.text_input(
    "üìä Banco de Dados",
    value="db/milionaria.db",
    help="Caminho para o arquivo do banco de dados"
)

config_path = st.sidebar.text_input(
    "üìã Arquivo de Configura√ß√£o",
    value="configs/filters.yaml",
    help="Caminho para o arquivo de configura√ß√£o YAML"
)

seed = st.sidebar.number_input(
    "üé≤ Seed (Reprodutibilidade)",
    min_value=1,
    max_value=9999,
    value=42,
    help="Seed para garantir resultados reproduz√≠veis"
)

top_k = st.sidebar.number_input(
    "üèÜ Top K Bilhetes",
    min_value=1,
    max_value=100,
    value=10,
    help="N√∫mero de melhores bilhetes para exibir"
)

export_filename = st.sidebar.text_input(
    "üìÑ Nome do Arquivo de Exporta√ß√£o",
    value="jogos_streamlit.xlsx",
    help="Nome do arquivo Excel para exporta√ß√£o"
)

# Bot√£o principal de gera√ß√£o
st.sidebar.markdown("---")
generate_button = st.sidebar.button(
    "üöÄ Gerar Jogos",
    type="primary",
    use_container_width=True
)

# √Årea principal
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üìà Resultados")
    
with col2:
    st.header("üìä M√©tricas")

# Estado da sess√£o para armazenar resultados
if 'results' not in st.session_state:
    st.session_state.results = None
if 'metrics' not in st.session_state:
    st.session_state.metrics = None

# Fun√ß√£o principal de execu√ß√£o
def run_pipeline(db_path, config_path, seed, top_k):
    """Executa o pipeline completo e retorna resultados."""
    try:
        logger.info("Iniciando pipeline completo")
        
        # 1. Carregar dados
        with st.spinner("üì• Carregando dados do banco..."):
            df = load_draws(db_path)
            logger.info(f"Dados carregados: {len(df)} registros")
            st.success(f"‚úÖ {len(df)} sorteios carregados")
        
        # 2. Gerar features e treinar modelo
        with st.spinner("üß† Gerando features e treinando modelo..."):
            logger.info("Gerando features...")
            features = build_number_features(df)
            logger.info(f"Features geradas: {features.shape}")
            
            snapshot = latest_feature_snapshot(df)
            logger.info(f"Snapshot gerado: {snapshot.shape}")
            
            model, scaler, weights = learn_weights_ridge(features)
            logger.info(f"Modelo treinado com {len(features)} amostras")
            
            scores = score_numbers(snapshot, weights)
            logger.info(f"Scores calculados para {len(scores)} n√∫meros")
            
            # Selecionar apenas colunas num√©ricas para o scaler
            numeric_features = features.select([
                'freq_total', 'roll10', 'roll25', 'last_seen', 'momentum5'
            ])
            
            r2_score = model.score(
                scaler.transform(numeric_features.to_numpy()),
                features.select('y_next').to_numpy().ravel()
            )
            
            st.success(f"‚úÖ Modelo treinado (R¬≤ = {r2_score:.4f})")
            st.success(f"‚úÖ Scores calculados para {len(scores)} n√∫meros")
        
        # 3. Gerar candidatos e aplicar filtros
        with st.spinner("üé≤ Gerando candidatos e aplicando filtros..."):
            logger.info("Carregando configura√ß√£o de filtros...")
            config = load_filters_config(config_path)
            
            candidates = generate_candidates(
                scores, 
                k=config['generation']['k'],
                top_pool=config['generation']['top_pool'],
                n=config['generation']['n'],
                seed=seed
            )
            logger.info(f"Candidatos gerados: {len(candidates)}")
            
            filtered_tickets = apply_filters(candidates, config['filters'])
            approval_rate = len(filtered_tickets) / len(candidates) * 100
            logger.info(f"Tickets filtrados: {len(filtered_tickets)} ({approval_rate:.1f}% aprova√ß√£o)")
            
            complete_tickets = assign_trevos(
                filtered_tickets, 
                strategy=config['trevos']['strategy'],
                seed=seed
            )
            
            # Pegar apenas os top_k melhores
            complete_tickets = complete_tickets[:config['output']['top_k']]
            logger.info(f"Bilhetes completos: {len(complete_tickets)}")
            
            st.success(f"‚úÖ {len(candidates)} candidatos gerados")
            st.success(f"‚úÖ {len(filtered_tickets)} tickets ap√≥s filtros ({approval_rate:.1f}% aprova√ß√£o)")
            st.success(f"‚úÖ {len(complete_tickets)} bilhetes completos gerados")
        
        # 4. Executar backtest
        with st.spinner("üìà Executando backtest paralelo..."):
            logger.info("Iniciando backtest paralelo...")
            results = run_backtest_parallel(complete_tickets, df)
            logger.info(f"Backtest conclu√≠do: {len(results)} resultados")
            st.success(f"‚úÖ Backtest conclu√≠do para {len(results)} bilhetes")
        
        # Ordenar por score e pegar top_k
        results_sorted = sorted(results, key=lambda x: x['score'], reverse=True)[:top_k]
        
        # Calcular m√©tricas gerais
        metrics = {
            'total_bilhetes': len(results),
            'score_medio': sum(r['score'] for r in results) / len(results),
            'melhor_score': max(r['score'] for r in results),
            'acertos_medios_dezenas': sum(r['avg_hits_dezenas'] for r in results) / len(results),
            'bilhetes_4_plus': sum(1 for r in results if r['max_hits_dezenas'] >= 4),
            'bilhetes_1_trevo_plus': sum(1 for r in results if r['max_hits_trevos'] >= 1),
            'r2_score': r2_score,
            'approval_rate': approval_rate,
            'weights': weights
        }
        
        logger.info("Pipeline conclu√≠do com sucesso")
        return results_sorted, metrics, results
        
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Erro durante pipeline: {error_msg}")
        logger.error(f"Traceback completo: {traceback.format_exc()}")
        
        if "could not convert string to float" in error_msg and "dezena" in error_msg:
            st.error("‚ùå Erro de convers√£o detectado: Problema com dados contendo 'dezena'")
            st.error("üí° Sugest√£o: Verifique se h√° dados corrompidos ou configura√ß√µes incorretas")
            st.info("üîß Tentando executar com valida√ß√£o adicional...")
            logger.warning("Tentando recupera√ß√£o com valida√ß√£o de dados")
            
            # Tentar novamente com valida√ß√£o extra
            try:
                # Recarregar dados com valida√ß√£o
                df_clean = load_draws(db_path)
                logger.info(f"Dados recarregados: {len(df_clean)} registros")
                
                # Verificar se h√° problemas nos dados
                if 'tipo' in df_clean.columns:
                    unique_tipos = df_clean['tipo'].unique().to_list()
                    st.info(f"Tipos √∫nicos encontrados: {unique_tipos}")
                    logger.info(f"Tipos √∫nicos: {unique_tipos}")
                    
                    # Filtrar apenas dados v√°lidos
                    df_clean = df_clean.filter(pl.col('tipo').is_in(['dezena', 'trevo']))
                    st.info(f"Dados filtrados: {df_clean.shape[0]} registros")
                    logger.info(f"Dados filtrados: {df_clean.shape[0]} registros")
                
                # Tentar pipeline novamente com dados limpos
                features_clean = build_number_features(df_clean)
                snapshot_clean = latest_feature_snapshot(df_clean)
                
                st.success("‚úÖ Dados validados e pipeline reiniciado")
                logger.info("Valida√ß√£o bem-sucedida")
                return None, None, None  # Retornar para permitir nova tentativa
                
            except Exception as retry_error:
                logger.error(f"Erro na recupera√ß√£o: {str(retry_error)}")
                logger.error(f"Traceback da recupera√ß√£o: {traceback.format_exc()}")
                st.error(f"‚ùå Erro persistente ap√≥s valida√ß√£o: {str(retry_error)}")
                st.error("üìã Detalhes t√©cnicos para debug:")
                st.code(f"Erro original: {error_msg}\nErro na valida√ß√£o: {str(retry_error)}")
        else:
            st.error(f"‚ùå Erro durante execu√ß√£o: {error_msg}")
            
        return None, None, None

# Executar pipeline quando bot√£o for pressionado
if generate_button:
    # Validar inputs
    if not os.path.exists(db_path):
        st.error(f"‚ùå Banco de dados n√£o encontrado: {db_path}")
    elif not os.path.exists(config_path):
        st.error(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {config_path}")
    else:
        start_time = time.time()
        
        results, metrics, all_results = run_pipeline(db_path, config_path, seed, top_k)
        
        if results and metrics:
            st.session_state.results = results
            st.session_state.metrics = metrics
            st.session_state.all_results = all_results
            
            execution_time = time.time() - start_time
            st.success(f"‚è±Ô∏è Pipeline conclu√≠do em {execution_time:.2f}s")

# Exibir resultados se dispon√≠veis
if st.session_state.results and st.session_state.metrics:
    results = st.session_state.results
    metrics = st.session_state.metrics
    
    # Coluna de resultados
    with col1:
        st.subheader(f"üèÜ Top {len(results)} Bilhetes")
        
        # Criar DataFrame para exibi√ß√£o
        display_data = []
        for i, result in enumerate(results, 1):
            display_data.append({
                'Rank': i,
                'Score': f"{result['score']:.4f}",
                'Avg Dez': f"{result['avg_hits_dezenas']:.2f}",
                'Avg Trev': f"{result['avg_hits_trevos']:.2f}",
                'Max Dez': result['max_hits_dezenas'],
                'Max Trev': result['max_hits_trevos'],
                'Bilhete': format_ticket_display((result['dezenas'], result['trevos']))
            })
        
        df_display = pd.DataFrame(display_data)
        st.dataframe(df_display, use_container_width=True)
        
        # Melhor bilhete em destaque
        if results:
            best = results[0]
            st.subheader("ü•á Melhor Bilhete")
            
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("Score", f"{best['score']:.4f}")
                st.metric("Acertos M√©dios (Dezenas)", f"{best['avg_hits_dezenas']:.2f}")
                st.metric("Acertos M√©dios (Trevos)", f"{best['avg_hits_trevos']:.2f}")
            
            with col_b:
                st.metric("M√°ximo Acertos (Dezenas)", best['max_hits_dezenas'])
                st.metric("M√°ximo Acertos (Trevos)", best['max_hits_trevos'])
                st.metric("Sorteios com Acertos", len(best['winning_draws']))
            
            # Exibir bilhete formatado
            dezenas_str = '-'.join([f"{int(d):02d}" for d in best['dezenas']])
            trevos_str = '-'.join([str(int(t)) for t in best['trevos']])
            st.code(f"Dezenas: {dezenas_str}\nTrevos: {trevos_str}", language=None)
    
    # Coluna de m√©tricas
    with col2:
        st.subheader("üìä Estat√≠sticas Gerais")
        
        st.metric("Total de Bilhetes", metrics['total_bilhetes'])
        st.metric("Score M√©dio", f"{metrics['score_medio']:.4f}")
        st.metric("Melhor Score", f"{metrics['melhor_score']:.4f}")
        st.metric("Acertos M√©dios (Dezenas)", f"{metrics['acertos_medios_dezenas']:.2f}")
        st.metric("Bilhetes com 4+ Acertos", metrics['bilhetes_4_plus'])
        st.metric("Bilhetes com 1+ Trevo", metrics['bilhetes_1_trevo_plus'])
        
        st.subheader("ü§ñ Modelo")
        st.metric("R¬≤ Score", f"{metrics['r2_score']:.4f}")
        st.metric("Taxa de Aprova√ß√£o", f"{metrics['approval_rate']:.1f}%")
        
        # Pesos do modelo
        st.subheader("‚öñÔ∏è Pesos do Modelo")
        for feature, weight in metrics['weights'].items():
            st.metric(feature, f"{float(weight):.4f}")
    
    # Se√ß√£o de exporta√ß√£o
    st.markdown("---")
    st.header("üìÑ Exporta√ß√£o")
    
    col_export1, col_export2 = st.columns([3, 1])
    
    with col_export1:
        st.write(f"Exportar todos os {metrics['total_bilhetes']} bilhetes para Excel:")
    
    with col_export2:
        if st.button("üì• Exportar Excel", type="secondary"):
            try:
                # Preparar dados para exporta√ß√£o
                export_path = f"outputs/{export_filename}"
                tickets_for_export = []
                
                for result in st.session_state.all_results:
                    tickets_for_export.append((result['dezenas'], result['trevos']))
                
                export_excel(tickets_for_export, export_path)
                
                st.success(f"‚úÖ {len(tickets_for_export)} bilhetes exportados para: {export_path}")
                
                # Oferecer download
                if os.path.exists(export_path):
                    with open(export_path, "rb") as file:
                        st.download_button(
                            label="‚¨áÔ∏è Download Excel",
                            data=file.read(),
                            file_name=export_filename,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                        
            except Exception as e:
                st.error(f"‚ùå Erro na exporta√ß√£o: {str(e)}")

else:
    # Tela inicial
    with col1:
        st.info("üëà Configure os par√¢metros na barra lateral e clique em 'Gerar Jogos' para come√ßar.")
        
        st.subheader("üìã Como usar:")
        st.markdown("""
        1. **Configure** o banco de dados e arquivo de configura√ß√£o
        2. **Ajuste** a seed para reprodutibilidade
        3. **Defina** quantos bilhetes exibir (Top K)
        4. **Clique** em 'Gerar Jogos' para executar o pipeline
        5. **Visualize** os resultados e m√©tricas
        6. **Exporte** os bilhetes em Excel se desejar
        """)
    
    with col2:
        st.subheader("‚ÑπÔ∏è Informa√ß√µes")
        st.markdown("""
        **Pipeline inclui:**
        - Carregamento de dados hist√≥ricos
        - Gera√ß√£o de features
        - Treinamento de modelo Ridge
        - Gera√ß√£o de candidatos
        - Aplica√ß√£o de filtros
        - Atribui√ß√£o de trevos
        - Backtest paralelo
        - Ranking por score
        """)

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: gray;'>üéØ +Milion√°ria AI - Interface Streamlit</div>",
    unsafe_allow_html=True
)