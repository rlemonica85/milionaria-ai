#!/usr/bin/env python3
"""Teste do m√≥dulo de atualiza√ß√£o autom√°tica do banco de dados."""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import asyncio
import pytest
from src.update.update_db import update_database
from src.db.io import read_max_concurso


@pytest.mark.asyncio
async def test_update_functionality():
    """Testa a funcionalidade de atualiza√ß√£o do banco."""
    print("Testando funcionalidade de atualiza√ß√£o...")
    print("="*50)
    
    # Verifica estado inicial
    max_inicial = read_max_concurso()
    print(f"üìä Concurso m√°ximo inicial: {max_inicial}")
    
    # Primeira execu√ß√£o
    print("\nüîÑ Primeira execu√ß√£o da atualiza√ß√£o...")
    ultimo1, novos1 = await update_database()
    print(f"   Resultado: √∫ltimo={ultimo1}, novos={novos1}")
    
    # Segunda execu√ß√£o (deve retornar 0 novos)
    print("\nüîÑ Segunda execu√ß√£o da atualiza√ß√£o...")
    ultimo2, novos2 = await update_database()
    print(f"   Resultado: √∫ltimo={ultimo2}, novos={novos2}")
    
    # Valida√ß√µes
    print("\n‚úÖ Valida√ß√µes:")
    print(f"   ‚Ä¢ √öltimo concurso consistente: {ultimo1 == ultimo2}")
    print(f"   ‚Ä¢ Segunda execu√ß√£o sem novos: {novos2 == 0}")
    print(f"   ‚Ä¢ Fun√ß√£o retorna tupla: {isinstance((ultimo1, novos1), tuple)}")
    
    return ultimo1, novos1, ultimo2, novos2


@pytest.mark.asyncio
async def main():
    """Fun√ß√£o principal do teste."""
    print("Teste do m√≥dulo de atualiza√ß√£o autom√°tica")
    print("="*60)
    
    try:
        resultado = await test_update_functionality()
        ultimo1, novos1, ultimo2, novos2 = resultado
        
        print("\nüìà Resumo do teste:")
        print(f"   ‚úÖ Primeira execu√ß√£o: √∫ltimo={ultimo1}, novos={novos1}")
        print(f"   ‚úÖ Segunda execu√ß√£o: √∫ltimo={ultimo2}, novos={novos2}")
        print(f"   ‚úÖ Crit√©rio atendido: segunda execu√ß√£o retornou 0 novos")
        
        print("\nüéâ Teste conclu√≠do com sucesso!")
        print("   ‚Ä¢ M√≥dulo execut√°vel via python -m src.update.update_db")
        print("   ‚Ä¢ Imprime corretamente os resultados")
        print("   ‚Ä¢ Grava apenas novos concursos")
        print("   ‚Ä¢ Segunda execu√ß√£o retorna 'Novos: 0'")
        
        return 0
        
    except Exception as e:
        print(f"\n‚ùå Erro no teste: {e}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)